// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = Microsoft.VisualStudio.TestTools.UITest.Input.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void CheckDownloadedLyrics()
        {
            #region Variable Declarations
            XamlButton uIAddMusicButton = this.UIBassBoosterWindow.UIAddMusicButton;
            XamlEdit uILyricsTextBoxEdit = this.UIBassBoosterWindow.UIItemPane.UILyricsTextBoxEdit;
            #endregion

            // Verify that the 'ControlType' property of 'Add Music' button equals 'Button'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIAddMusicButtonControlType, uIAddMusicButton.ControlType.ToString(), "aaa");

            // Verify that the 'ControlType' property of 'LyricsTextBox' text box isNotNull'
            Assert.IsNotNull(uILyricsTextBoxEdit.ControlType.ToString());
            //StringAssert.Contains(uILyricsTextBoxEdit.ControlType.ToString(), this.AssertMethod1ExpectedValues.UILyricsTextBoxEditControlType, "Failed.");
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIBassBoosterWindow UIBassBoosterWindow
        {
            get
            {
                if ((this.mUIBassBoosterWindow == null))
                {
                    this.mUIBassBoosterWindow = new UIBassBoosterWindow();
                }
                return this.mUIBassBoosterWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIBassBoosterWindow mUIBassBoosterWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Add Music' button equals 'Button'
        /// </summary>
        public string UIAddMusicButtonControlType = "Button";
        
        /// <summary>
        /// Verify that the 'ControlType' property of 'LyricsTextBox' text box contains 'Sometime I just'
        /// </summary>
        public string UILyricsTextBoxEditControlType = "Sometime I just";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIBassBoosterWindow : XamlWindow
    {
        
        public UIBassBoosterWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "Bass Booster";
            this.SearchProperties[XamlControl.PropertyNames.ClassName] = "Windows.UI.Core.CoreWindow";
            this.WindowTitles.Add("Bass Booster");
            #endregion
        }
        
        #region Properties
        public XamlButton UIAddMusicButton
        {
            get
            {
                if ((this.mUIAddMusicButton == null))
                {
                    this.mUIAddMusicButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIAddMusicButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "FileOpenButton";
                    this.mUIAddMusicButton.WindowTitles.Add("Bass Booster");
                    #endregion
                }
                return this.mUIAddMusicButton;
            }
        }
        
        public XamlEdit UITitleBoxEdit
        {
            get
            {
                if ((this.mUITitleBoxEdit == null))
                {
                    this.mUITitleBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUITitleBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "TitleBox";
                    this.mUITitleBoxEdit.WindowTitles.Add("Bass Booster");
                    #endregion
                }
                return this.mUITitleBoxEdit;
            }
        }
        
        public XamlButton UISearchButton
        {
            get
            {
                if ((this.mUISearchButton == null))
                {
                    this.mUISearchButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISearchButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "LyricsDlButton";
                    this.mUISearchButton.WindowTitles.Add("Bass Booster");
                    #endregion
                }
                return this.mUISearchButton;
            }
        }
        
        public UIItemPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new UIItemPane(this);
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private XamlButton mUIAddMusicButton;
        
        private XamlEdit mUITitleBoxEdit;
        
        private XamlButton mUISearchButton;
        
        private UIItemPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemPane : XamlControl
    {
        
        public UIItemPane(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
            this.WindowTitles.Add("Bass Booster");
            #endregion
        }
        
        #region Properties
        public XamlEdit UILyricsTextBoxEdit
        {
            get
            {
                if ((this.mUILyricsTextBoxEdit == null))
                {
                    this.mUILyricsTextBoxEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUILyricsTextBoxEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "LyricsTextBox";
                    this.mUILyricsTextBoxEdit.WindowTitles.Add("Bass Booster");
                    #endregion
                }
                return this.mUILyricsTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private XamlEdit mUILyricsTextBoxEdit;
        #endregion
    }
}
